//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Blueprint41.Modeller.Schemas {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (entities?, relationships?, submodels?, functionalIds?)
    /// </para>
    /// </summary>
    public partial class modeller : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator modeller(XElement xe) { return XTypedServices.ToXTypedElement<modeller>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static modeller() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("entities", "http://xirqlz.com/2016/Blueprint/Modeller")), new NamedContentModelEntity(XName.Get("relationships", "http://xirqlz.com/2016/Blueprint/Modeller")), new NamedContentModelEntity(XName.Get("submodels", "http://xirqlz.com/2016/Blueprint/Modeller")), new NamedContentModelEntity(XName.Get("functionalIds", "http://xirqlz.com/2016/Blueprint/Modeller")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (entities?, relationships?, submodels?, functionalIds?)
        /// </para>
        /// </summary>
        public modeller() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (entities?, relationships?, submodels?, functionalIds?)
        /// </para>
        /// </summary>
        public entitiesLocalType entities {
            get {
                XElement x = this.GetElement(XName.Get("entities", "http://xirqlz.com/2016/Blueprint/Modeller"));
                return ((entitiesLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("entities", "http://xirqlz.com/2016/Blueprint/Modeller"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (entities?, relationships?, submodels?, functionalIds?)
        /// </para>
        /// </summary>
        public relationshipsLocalType relationships {
            get {
                XElement x = this.GetElement(XName.Get("relationships", "http://xirqlz.com/2016/Blueprint/Modeller"));
                return ((relationshipsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("relationships", "http://xirqlz.com/2016/Blueprint/Modeller"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (entities?, relationships?, submodels?, functionalIds?)
        /// </para>
        /// </summary>
        public submodelsLocalType submodels {
            get {
                XElement x = this.GetElement(XName.Get("submodels", "http://xirqlz.com/2016/Blueprint/Modeller"));
                return ((submodelsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("submodels", "http://xirqlz.com/2016/Blueprint/Modeller"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (entities?, relationships?, submodels?, functionalIds?)
        /// </para>
        /// </summary>
        public functionalIdsLocalType functionalIds {
            get {
                XElement x = this.GetElement(XName.Get("functionalIds", "http://xirqlz.com/2016/Blueprint/Modeller"));
                return ((functionalIdsLocalType)(x));
            }
            set {
                this.SetElement(XName.Get("functionalIds", "http://xirqlz.com/2016/Blueprint/Modeller"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("modeller", "http://xirqlz.com/2016/Blueprint/Modeller");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static modeller Load(string xmlFile) {
            return XTypedServices.Load<modeller>(xmlFile);
        }
        
        public static modeller Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<modeller>(xmlFile);
        }
        
        public static modeller Parse(string xml) {
            return XTypedServices.Parse<modeller>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<modeller>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("entities", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(entitiesLocalType));
            localElementDictionary.Add(XName.Get("relationships", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(relationshipsLocalType));
            localElementDictionary.Add(XName.Get("submodels", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(submodelsLocalType));
            localElementDictionary.Add(XName.Get("functionalIds", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(functionalIdsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (entity*)
        /// </para>
        /// </summary>
        public partial class entitiesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<entity> entityField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator entitiesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<entitiesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static entitiesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("entity", "http://xirqlz.com/2016/Blueprint/Modeller")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (entity*)
            /// </para>
            /// </summary>
            public entitiesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (entity*)
            /// </para>
            /// </summary>
            public IList<entity> entity {
                get {
                    if ((this.entityField == null)) {
                        this.entityField = new XTypedList<entity>(this, LinqToXsdTypeManager.Instance, XName.Get("entity", "http://xirqlz.com/2016/Blueprint/Modeller"));
                    }
                    return this.entityField;
                }
                set {
                    if ((value == null)) {
                        this.entityField = null;
                    }
                    else {
                        if ((this.entityField == null)) {
                            this.entityField = XTypedList<entity>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("entity", "http://xirqlz.com/2016/Blueprint/Modeller"));
                        }
                        else {
                            XTypedServices.SetList<entity>(this.entityField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("entities", "http://xirqlz.com/2016/Blueprint/Modeller");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<entitiesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("entity", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(entity));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (relationship*)
        /// </para>
        /// </summary>
        public partial class relationshipsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<relationship> relationshipField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator relationshipsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<relationshipsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static relationshipsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("relationship", "http://xirqlz.com/2016/Blueprint/Modeller")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (relationship*)
            /// </para>
            /// </summary>
            public relationshipsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (relationship*)
            /// </para>
            /// </summary>
            public IList<relationship> relationship {
                get {
                    if ((this.relationshipField == null)) {
                        this.relationshipField = new XTypedList<relationship>(this, LinqToXsdTypeManager.Instance, XName.Get("relationship", "http://xirqlz.com/2016/Blueprint/Modeller"));
                    }
                    return this.relationshipField;
                }
                set {
                    if ((value == null)) {
                        this.relationshipField = null;
                    }
                    else {
                        if ((this.relationshipField == null)) {
                            this.relationshipField = XTypedList<relationship>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("relationship", "http://xirqlz.com/2016/Blueprint/Modeller"));
                        }
                        else {
                            XTypedServices.SetList<relationship>(this.relationshipField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("relationships", "http://xirqlz.com/2016/Blueprint/Modeller");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<relationshipsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("relationship", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(relationship));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (submodel*)
        /// </para>
        /// </summary>
        public partial class submodelsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<submodel> submodelField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator submodelsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<submodelsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static submodelsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("submodel", "http://xirqlz.com/2016/Blueprint/Modeller")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (submodel*)
            /// </para>
            /// </summary>
            public submodelsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (submodel*)
            /// </para>
            /// </summary>
            public IList<submodel> submodel {
                get {
                    if ((this.submodelField == null)) {
                        this.submodelField = new XTypedList<submodel>(this, LinqToXsdTypeManager.Instance, XName.Get("submodel", "http://xirqlz.com/2016/Blueprint/Modeller"));
                    }
                    return this.submodelField;
                }
                set {
                    if ((value == null)) {
                        this.submodelField = null;
                    }
                    else {
                        if ((this.submodelField == null)) {
                            this.submodelField = XTypedList<submodel>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("submodel", "http://xirqlz.com/2016/Blueprint/Modeller"));
                        }
                        else {
                            XTypedServices.SetList<submodel>(this.submodelField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("submodels", "http://xirqlz.com/2016/Blueprint/Modeller");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<submodelsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("submodel", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(submodel));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (functionalId*)
        /// </para>
        /// </summary>
        public partial class functionalIdsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<functionalId> functionalIdField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator functionalIdsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<functionalIdsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static functionalIdsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("functionalId", "http://xirqlz.com/2016/Blueprint/Modeller")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (functionalId*)
            /// </para>
            /// </summary>
            public functionalIdsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (functionalId*)
            /// </para>
            /// </summary>
            public IList<functionalId> functionalId {
                get {
                    if ((this.functionalIdField == null)) {
                        this.functionalIdField = new XTypedList<functionalId>(this, LinqToXsdTypeManager.Instance, XName.Get("functionalId", "http://xirqlz.com/2016/Blueprint/Modeller"));
                    }
                    return this.functionalIdField;
                }
                set {
                    if ((value == null)) {
                        this.functionalIdField = null;
                    }
                    else {
                        if ((this.functionalIdField == null)) {
                            this.functionalIdField = XTypedList<functionalId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("functionalId", "http://xirqlz.com/2016/Blueprint/Modeller"));
                        }
                        else {
                            XTypedServices.SetList<functionalId>(this.functionalIdField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("functionalIds", "http://xirqlz.com/2016/Blueprint/Modeller");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<functionalIdsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("functionalId", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(functionalId));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    public partial class nodeReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool nullableDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
         public static explicit operator nodeReference(XElement xe) { return XTypedServices.ToXTypedElement<nodeReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public nodeReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string label {
            get {
                XAttribute x = this.Attribute(XName.Get("label", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool nullable {
            get {
                XAttribute x = this.Attribute(XName.Get("nullable", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, nullableDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("nullable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string referenceGuid {
            get {
                XAttribute x = this.Attribute(XName.Get("referenceGuid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("referenceGuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("nodeReference", "http://xirqlz.com/2016/Blueprint/Modeller");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<nodeReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (source, target)
    /// </para>
    /// </summary>
    public partial class relationship : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator relationship(XElement xe) { return XTypedServices.ToXTypedElement<relationship>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static relationship() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("source", "http://xirqlz.com/2016/Blueprint/Modeller")), new NamedContentModelEntity(XName.Get("target", "http://xirqlz.com/2016/Blueprint/Modeller")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (source, target)
        /// </para>
        /// </summary>
        public relationship() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (source, target)
        /// </para>
        /// </summary>
        public nodeReference source {
            get {
                XElement x = this.GetElement(XName.Get("source", "http://xirqlz.com/2016/Blueprint/Modeller"));
                return ((nodeReference)(x));
            }
            set {
                this.SetElement(XName.Get("source", "http://xirqlz.com/2016/Blueprint/Modeller"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (source, target)
        /// </para>
        /// </summary>
        public nodeReference target {
            get {
                XElement x = this.GetElement(XName.Get("target", "http://xirqlz.com/2016/Blueprint/Modeller"));
                return ((nodeReference)(x));
            }
            set {
                this.SetElement(XName.Get("target", "http://xirqlz.com/2016/Blueprint/Modeller"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string guid {
            get {
                XAttribute x = this.Attribute(XName.Get("guid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("guid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string mappingGuid {
            get {
                XAttribute x = this.Attribute(XName.Get("mappingGuid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("mappingGuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("relationship", "http://xirqlz.com/2016/Blueprint/Modeller");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<relationship>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("source", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(nodeReference));
            localElementDictionary.Add(XName.Get("target", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(nodeReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class primitive : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isKeyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool nullableDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isFullTextPropertyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
         public static explicit operator primitive(XElement xe) { return XTypedServices.ToXTypedElement<primitive>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public primitive() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isKey {
            get {
                XAttribute x = this.Attribute(XName.Get("isKey", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isKeyDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool nullable {
            get {
                XAttribute x = this.Attribute(XName.Get("nullable", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, nullableDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("nullable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isFullTextProperty {
            get {
                XAttribute x = this.Attribute(XName.Get("isFullTextProperty", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isFullTextPropertyDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isFullTextProperty", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string guid {
            get {
                XAttribute x = this.Attribute(XName.Get("guid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("guid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string mappingGuid {
            get {
                XAttribute x = this.Attribute(XName.Get("mappingGuid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("mappingGuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string index {
            get {
                XAttribute x = this.Attribute(XName.Get("index", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("index", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("primitive", "http://xirqlz.com/2016/Blueprint/Modeller");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<primitive>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (records?)
    /// </para>
    /// </summary>
    public partial class staticData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator staticData(XElement xe) { return XTypedServices.ToXTypedElement<staticData>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static staticData() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("records", "http://xirqlz.com/2016/Blueprint/Modeller")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (records?)
        /// </para>
        /// </summary>
        public staticData() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (records?)
        /// </para>
        /// </summary>
        public records records {
            get {
                XElement x = this.GetElement(XName.Get("records", "http://xirqlz.com/2016/Blueprint/Modeller"));
                return ((records)(x));
            }
            set {
                this.SetElement(XName.Get("records", "http://xirqlz.com/2016/Blueprint/Modeller"), value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("staticData", "http://xirqlz.com/2016/Blueprint/Modeller");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<staticData>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("records", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(records));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (record*)
    /// </para>
    /// </summary>
    public partial class records : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<record> recordField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator records(XElement xe) { return XTypedServices.ToXTypedElement<records>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static records() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("record", "http://xirqlz.com/2016/Blueprint/Modeller")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (record*)
        /// </para>
        /// </summary>
        public records() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (record*)
        /// </para>
        /// </summary>
        public IList<record> record {
            get {
                if ((this.recordField == null)) {
                    this.recordField = new XTypedList<record>(this, LinqToXsdTypeManager.Instance, XName.Get("record", "http://xirqlz.com/2016/Blueprint/Modeller"));
                }
                return this.recordField;
            }
            set {
                if ((value == null)) {
                    this.recordField = null;
                }
                else {
                    if ((this.recordField == null)) {
                        this.recordField = XTypedList<record>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("record", "http://xirqlz.com/2016/Blueprint/Modeller"));
                    }
                    else {
                        XTypedServices.SetList<record>(this.recordField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("records", "http://xirqlz.com/2016/Blueprint/Modeller");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<records>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("record", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(record));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (property*)
    /// </para>
    /// </summary>
    public partial class record : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<property> propertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator record(XElement xe) { return XTypedServices.ToXTypedElement<record>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static record() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("property", "http://xirqlz.com/2016/Blueprint/Modeller")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (property*)
        /// </para>
        /// </summary>
        public record() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (property*)
        /// </para>
        /// </summary>
        public IList<property> property {
            get {
                if ((this.propertyField == null)) {
                    this.propertyField = new XTypedList<property>(this, LinqToXsdTypeManager.Instance, XName.Get("property", "http://xirqlz.com/2016/Blueprint/Modeller"));
                }
                return this.propertyField;
            }
            set {
                if ((value == null)) {
                    this.propertyField = null;
                }
                else {
                    if ((this.propertyField == null)) {
                        this.propertyField = XTypedList<property>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("property", "http://xirqlz.com/2016/Blueprint/Modeller"));
                    }
                    else {
                        XTypedServices.SetList<property>(this.propertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string guid {
            get {
                XAttribute x = this.Attribute(XName.Get("guid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("guid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string mappingGuid {
            get {
                XAttribute x = this.Attribute(XName.Get("mappingGuid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("mappingGuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("record", "http://xirqlz.com/2016/Blueprint/Modeller");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<record>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("property", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(property));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class property : XTypedElement, IXMetaData {
        
         public static explicit operator property(XElement xe) { return XTypedServices.ToXTypedElement<property>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public property() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string propertyGuid {
            get {
                XAttribute x = this.Attribute(XName.Get("propertyGuid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("propertyGuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string mappingGuid {
            get {
                XAttribute x = this.Attribute(XName.Get("mappingGuid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("mappingGuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string value {
            get {
                XAttribute x = this.Attribute(XName.Get("value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("property", "http://xirqlz.com/2016/Blueprint/Modeller");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<property>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (primitive*, staticData?)
    /// </para>
    /// </summary>
    public partial class entity : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<primitive> primitiveField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool @abstractDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool @virtualDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isStaticDataDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator entity(XElement xe) { return XTypedServices.ToXTypedElement<entity>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static entity() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("primitive", "http://xirqlz.com/2016/Blueprint/Modeller")), new NamedContentModelEntity(XName.Get("staticData", "http://xirqlz.com/2016/Blueprint/Modeller")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (primitive*, staticData?)
        /// </para>
        /// </summary>
        public entity() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (primitive*, staticData?)
        /// </para>
        /// </summary>
        public IList<primitive> primitive {
            get {
                if ((this.primitiveField == null)) {
                    this.primitiveField = new XTypedList<primitive>(this, LinqToXsdTypeManager.Instance, XName.Get("primitive", "http://xirqlz.com/2016/Blueprint/Modeller"));
                }
                return this.primitiveField;
            }
            set {
                if ((value == null)) {
                    this.primitiveField = null;
                }
                else {
                    if ((this.primitiveField == null)) {
                        this.primitiveField = XTypedList<primitive>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("primitive", "http://xirqlz.com/2016/Blueprint/Modeller"));
                    }
                    else {
                        XTypedServices.SetList<primitive>(this.primitiveField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (primitive*, staticData?)
        /// </para>
        /// </summary>
        public staticData staticData {
            get {
                XElement x = this.GetElement(XName.Get("staticData", "http://xirqlz.com/2016/Blueprint/Modeller"));
                return ((staticData)(x));
            }
            set {
                this.SetElement(XName.Get("staticData", "http://xirqlz.com/2016/Blueprint/Modeller"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string label {
            get {
                XAttribute x = this.Attribute(XName.Get("label", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool @abstract {
            get {
                XAttribute x = this.Attribute(XName.Get("abstract", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, @abstractDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("abstract", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool @virtual {
            get {
                XAttribute x = this.Attribute(XName.Get("virtual", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, @virtualDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("virtual", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string summary {
            get {
                XAttribute x = this.Attribute(XName.Get("summary", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("summary", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string example {
            get {
                XAttribute x = this.Attribute(XName.Get("example", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("example", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string inherits {
            get {
                XAttribute x = this.Attribute(XName.Get("inherits", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("inherits", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string prefix {
            get {
                XAttribute x = this.Attribute(XName.Get("prefix", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("prefix", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isStaticData {
            get {
                XAttribute x = this.Attribute(XName.Get("isStaticData", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isStaticDataDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isStaticData", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string functionalId {
            get {
                XAttribute x = this.Attribute(XName.Get("functionalId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("functionalId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string guid {
            get {
                XAttribute x = this.Attribute(XName.Get("guid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("guid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string mappingGuid {
            get {
                XAttribute x = this.Attribute(XName.Get("mappingGuid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("mappingGuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("entity", "http://xirqlz.com/2016/Blueprint/Modeller");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<entity>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("primitive", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(primitive));
            localElementDictionary.Add(XName.Get("staticData", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(staticData));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (explaination?, node*)
    /// </para>
    /// </summary>
    public partial class submodel : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<nodeLocalType> nodeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isDraftDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isLaboratoryDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator submodel(XElement xe) { return XTypedServices.ToXTypedElement<submodel>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static submodel() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("explaination", "http://xirqlz.com/2016/Blueprint/Modeller")), new NamedContentModelEntity(XName.Get("node", "http://xirqlz.com/2016/Blueprint/Modeller")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (explaination?, node*)
        /// </para>
        /// </summary>
        public submodel() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (explaination?, node*)
        /// </para>
        /// </summary>
        public string explaination {
            get {
                XElement x = this.GetElement(XName.Get("explaination", "http://xirqlz.com/2016/Blueprint/Modeller"));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(XName.Get("explaination", "http://xirqlz.com/2016/Blueprint/Modeller"), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (explaination?, node*)
        /// </para>
        /// </summary>
        public IList<Blueprint41.Modeller.Schemas.submodel.nodeLocalType> node {
            get {
                if ((this.nodeField == null)) {
                    this.nodeField = new XTypedList<nodeLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("node", "http://xirqlz.com/2016/Blueprint/Modeller"));
                }
                return this.nodeField;
            }
            set {
                if ((value == null)) {
                    this.nodeField = null;
                }
                else {
                    if ((this.nodeField == null)) {
                        this.nodeField = XTypedList<nodeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("node", "http://xirqlz.com/2016/Blueprint/Modeller"));
                    }
                    else {
                        XTypedServices.SetList<nodeLocalType>(this.nodeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public System.Nullable<int> chapter {
            get {
                XAttribute x = this.Attribute(XName.Get("chapter", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("chapter", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isDraft {
            get {
                XAttribute x = this.Attribute(XName.Get("isDraft", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isDraftDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isDraft", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isLaboratory {
            get {
                XAttribute x = this.Attribute(XName.Get("isLaboratory", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isLaboratoryDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isLaboratory", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("submodel", "http://xirqlz.com/2016/Blueprint/Modeller");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<submodel>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("explaination", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(string));
            localElementDictionary.Add(XName.Get("node", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(nodeLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class nodeLocalType : XTypedElement, IXMetaData {
            
         public static explicit operator nodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<nodeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public nodeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string label {
                get {
                    XAttribute x = this.Attribute(XName.Get("label", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("label", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public string entityGuid {
                get {
                    XAttribute x = this.Attribute(XName.Get("entityGuid", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("entityGuid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<double> xcoordinate {
                get {
                    XAttribute x = this.Attribute(XName.Get("xcoordinate", ""));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("xcoordinate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public System.Nullable<double> ycoordinate {
                get {
                    XAttribute x = this.Attribute(XName.Get("ycoordinate", ""));
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
                }
                set {
                    this.SetAttribute(XName.Get("ycoordinate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("node", "http://xirqlz.com/2016/Blueprint/Modeller");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<nodeLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (functionalId*)
    /// </para>
    /// </summary>
    public partial class functionalIds : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<functionalId> functionalIdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator functionalIds(XElement xe) { return XTypedServices.ToXTypedElement<functionalIds>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static functionalIds() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("functionalId", "http://xirqlz.com/2016/Blueprint/Modeller")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (functionalId*)
        /// </para>
        /// </summary>
        public functionalIds() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (functionalId*)
        /// </para>
        /// </summary>
        public IList<functionalId> functionalId {
            get {
                if ((this.functionalIdField == null)) {
                    this.functionalIdField = new XTypedList<functionalId>(this, LinqToXsdTypeManager.Instance, XName.Get("functionalId", "http://xirqlz.com/2016/Blueprint/Modeller"));
                }
                return this.functionalIdField;
            }
            set {
                if ((value == null)) {
                    this.functionalIdField = null;
                }
                else {
                    if ((this.functionalIdField == null)) {
                        this.functionalIdField = XTypedList<functionalId>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("functionalId", "http://xirqlz.com/2016/Blueprint/Modeller"));
                    }
                    else {
                        XTypedServices.SetList<functionalId>(this.functionalIdField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("functionalIds", "http://xirqlz.com/2016/Blueprint/Modeller");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<functionalIds>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("functionalId", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(functionalId));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class functionalId : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isDefaultDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
         public static explicit operator functionalId(XElement xe) { return XTypedServices.ToXTypedElement<functionalId>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public functionalId() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string value {
            get {
                XAttribute x = this.Attribute(XName.Get("value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string name {
            get {
                XAttribute x = this.Attribute(XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string type {
            get {
                XAttribute x = this.Attribute(XName.Get("type", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public string guid {
            get {
                XAttribute x = this.Attribute(XName.Get("guid", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("guid", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public bool isDefault {
            get {
                XAttribute x = this.Attribute(XName.Get("isDefault", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isDefaultDefaultValue);
            }
            set {
                this.SetAttribute(XName.Get("isDefault", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("functionalId", "http://xirqlz.com/2016/Blueprint/Modeller");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<functionalId>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(XName.Get("nodeReference", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(global::Blueprint41.Modeller.Schemas.nodeReference));
            typeDictionary.Add(XName.Get("relationship", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(global::Blueprint41.Modeller.Schemas.relationship));
            typeDictionary.Add(XName.Get("primitive", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(global::Blueprint41.Modeller.Schemas.primitive));
            typeDictionary.Add(XName.Get("staticData", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(global::Blueprint41.Modeller.Schemas.staticData));
            typeDictionary.Add(XName.Get("records", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(global::Blueprint41.Modeller.Schemas.records));
            typeDictionary.Add(XName.Get("record", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(global::Blueprint41.Modeller.Schemas.record));
            typeDictionary.Add(XName.Get("property", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(global::Blueprint41.Modeller.Schemas.property));
            typeDictionary.Add(XName.Get("entity", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(global::Blueprint41.Modeller.Schemas.entity));
            typeDictionary.Add(XName.Get("submodel", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(global::Blueprint41.Modeller.Schemas.submodel));
            typeDictionary.Add(XName.Get("functionalIds", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(global::Blueprint41.Modeller.Schemas.functionalIds));
            typeDictionary.Add(XName.Get("functionalId", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(global::Blueprint41.Modeller.Schemas.functionalId));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("modeller", "http://xirqlz.com/2016/Blueprint/Modeller"), typeof(global::Blueprint41.Modeller.Schemas.modeller));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("modeller", "http://xirqlz.com/2016/Blueprint/Modeller")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public modeller modeller {  get {return rootObject as modeller; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(modeller root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::Blueprint41.Modeller.Schemas.modeller modeller {  get {return rootObject as global::Blueprint41.Modeller.Schemas.modeller; } }
        
        private XRoot() {
        }
        
        public XRoot(global::Blueprint41.Modeller.Schemas.modeller root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
