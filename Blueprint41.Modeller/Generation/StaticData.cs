// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Blueprint41.Modeller.Generation
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    using Blueprint41.Modeller.Schemas;
    using Blueprint41.Modeller;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\_CirclesArrows\blueprint41\Blueprint41.Modeller\Generation\StaticData.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class StaticData : GenerationBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\r\npublic void Script()\r\n{\r\n\tif (ApplyToDatabase)\r\n\t{\r\n\t");
            
            #line 15 "E:\_CirclesArrows\blueprint41\Blueprint41.Modeller\Generation\StaticData.tt"
  
	foreach(var entity in Entities)
	{
	
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 19 "E:\_CirclesArrows\blueprint41\Blueprint41.Modeller\Generation\StaticData.tt"

		if (entity.StaticData != null)
		{
	
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 23 "E:\_CirclesArrows\blueprint41\Blueprint41.Modeller\Generation\StaticData.tt"
 
			foreach(var record in entity.StaticData.Records.Record)
		{
	 
            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\t");
            
            #line 27 "E:\_CirclesArrows\blueprint41\Blueprint41.Modeller\Generation\StaticData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Label));
            
            #line default
            #line hidden
            this.Write(".Refactor.CreateNode(new\r\n\t\t\t{\r\n\t\t\t// Primitive properties\r\n\t\t\t");
            
            #line 30 "E:\_CirclesArrows\blueprint41\Blueprint41.Modeller\Generation\StaticData.tt"
 WritePrimitiveProperties(record,entity); 
            
            #line default
            #line hidden
            this.Write(" \r\n\r\n\t\t\t// Properties from Relationships\r\n\t\t\t");
            
            #line 33 "E:\_CirclesArrows\blueprint41\Blueprint41.Modeller\Generation\StaticData.tt"
 WriteRelationshipProperties(record,entity); 
            
            #line default
            #line hidden
            this.Write("\t\t\t}\r\n\t\t);\r\n\t\t\t\r\n\r\n\t\t");
            
            #line 38 "E:\_CirclesArrows\blueprint41\Blueprint41.Modeller\Generation\StaticData.tt"
 
		}
		 
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 41 "E:\_CirclesArrows\blueprint41\Blueprint41.Modeller\Generation\StaticData.tt"
 
		}
		 
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 44 "E:\_CirclesArrows\blueprint41\Blueprint41.Modeller\Generation\StaticData.tt"
 	
		}
	    
            
            #line default
            #line hidden
            this.Write("\t}\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 49 "E:\_CirclesArrows\blueprint41\Blueprint41.Modeller\Generation\StaticData.tt"
 

private void WritePrimitiveProperties(Record record, Entity e)
{
			var allProperties = new List<Primitive>();
            Entity current = e;
            do
            {
               allProperties.AddRange(current.Primitive);
               current = current.ParentEntity;
            } while (current != null);
            var primitiveRecords = record.Property.Where(r => allProperties.Any(p => p.Guid == r.PropertyGuid));
            Write(string.Join($"{Environment.NewLine}", primitiveRecords.Select(x => $"{x.PropertyGuid} = \"{x.Value}\",")));
}

private void WriteRelationshipProperties(Record record, Entity e)
{
	foreach(var r in record.Property)
    {
                var relationship = e.GetRelationships(RelationshipDirection.In, true).First();
                if (relationship != null)
                {
                    var inEntity = relationship.InEntity;
                    var outEntity = relationship.OutEntity;
                    var inProperty = relationship.InProperty;
                    string propertyGuid = e.Primitive.ToList().Where(x => x.Name == "Uid").First().Guid.ToString();
                    var uid = record.Property.Single(x => x.PropertyGuid == propertyGuid).Value;

                    if (relationship.InPropertyType.Equals("Collection"))
                    {
                        var values = r.Value.Split(',');
                        Write(inProperty+" = new dynamic[] {");
                        var strings = values.Select(val => $"({outEntity}.Refactor.MatchNode(\"{val}\"))");

                        Write(string.Join(","+Environment.NewLine, strings));

						Write("},");
                    }
                    else
                    {
                        var value = r.Value;
                        Write($"{inProperty} = {outEntity}.Refactor.MatchNode(\"{value}\"),");
                    }
        }	           
    }
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
