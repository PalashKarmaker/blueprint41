// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Blueprint41.Modeller.Generation
{
    using System;
    using System.Text;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using System.Collections;
    using System.Collections.Generic;
    using Blueprint41.Modeller.Schemas;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    internal partial class ApiDefinition : GenerationBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            
            #line 10 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"

    foreach (var entity in Entities)
    {
		this.CurrentEntity = entity.Name;

            
            #line default
            #line hidden
            this.Write("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<entity xmlns=\"http://marlink.com/2016/B" +
                    "usinessMap/Generation/CRUD/Entity\" name=\"");
            
            #line 16 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Name));
            
            #line default
            #line hidden
            this.Write("\" ");
            
            #line 16 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entity.Abstract?"abstract=\"true\"":""));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 16 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"
WriteInherits(entity);
            
            #line default
            #line hidden
            this.Write(" >\r\n");
            
            #line 17 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"

 if(entity.Abstract || entity.Inherits.Equals("Neo4jBase"))
 {

            
            #line default
            #line hidden
            this.Write("\t<property name=\"Id\" type=\"string\" mapsto=\"Uid\" />\r\n");
            
            #line 22 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"

 }
		
        foreach (var primitive in entity.Primitive)
        {

            
            #line default
            #line hidden
            this.Write("\t<property name=\"");
            
            #line 28 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(primitive.Name));
            
            #line default
            #line hidden
            this.Write("\" type=\"");
            
            #line 28 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(primitive.Type.ToString()));
            
            #line default
            #line hidden
            
            #line 28 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"
WriteType(primitive);
            
            #line default
            #line hidden
            this.Write("\" ");
            
            #line 28 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"
WriteNullable(primitive);
            
            #line default
            #line hidden
            this.Write("/>\r\n");
            
            #line 29 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"

        }
        foreach (var relationship in entity.GetRelationships(RelationshipDirection.In, false))
        {

            
            #line default
            #line hidden
            this.Write("\t<property name=\"");
            
            #line 34 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relationship.Source.Name));
            
            #line default
            #line hidden
            this.Write("\" type=\"");
            
            #line 34 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relationship.Target.Label));
            
            #line default
            #line hidden
            this.Write("\" complex=\"Lookup\" ");
            
            #line 34 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relationship.Source.Type.ToString().Equals("Collection")?"list=\"true\"":""));
            
            #line default
            #line hidden
            this.Write(" /> \r\n");
            
            #line 35 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"

        }

            
            #line default
            #line hidden
            
            #line 38 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"

		foreach (var relationship in entity.GetRelationships(RelationshipDirection.Out, true))
        {

            
            #line default
            #line hidden
            this.Write("\t<relationship name=\"");
            
            #line 42 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(relationship.Name));
            
            #line default
            #line hidden
            this.Write("\" type=\"Out\" action=\"Error\" />\r\n");
            
            #line 43 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"

        }

            
            #line default
            #line hidden
            this.Write("</entity>\r\n");
            
            #line 47 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"

    }

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 50 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"
 
private void WriteInherits(Entity entity)
{
	 if(!(string.IsNullOrEmpty(entity.Inherits) || entity.Inherits.Equals("Neo4jBase")))
     {
		 string inherits = string.Empty;
		 IEnumerable<Entity> entities = Modeller.Entities.Entity.Where(x => x.Guid == entity.Inherits);
		 if(entities.Count() != 0)
         {
			inherits = entities.First().Name;
		 }
		
		Write(string.Concat("inherits=\"", inherits + "\""));
     }
}

        
        #line default
        #line hidden
        
        #line 66 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"
 
private void WriteType(Primitive primitive)
{
	 string questionMark = string.Empty;
	 Type type = Type.GetType(string.Format("System.{0}", GetTypeAlias(primitive)));
	 if(primitive.Nullable == true && type != null)
	 	Write("?");
}

        
        #line default
        #line hidden
        
        #line 75 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"
 
private void WriteNullable(Primitive primitive)
{
	string nullable = string.Empty;
	
	Type nType = Type.GetType(string.Format("System.{0}", GetTypeAlias(primitive)));
	if(nType == null)
    {
		if(!primitive.Nullable)
			Write("nullable=\"false\"");
	}
}


        
        #line default
        #line hidden
        
        #line 90 "C:\_Projects\Xirqlz\Blueprint41.Modeller\Generation\ApiDefinition.tt"
 
private string GetTypeAlias(Primitive primitive)
{
	if(primitive.Type == "bool")
		primitive.Type = "Boolean";
	if(primitive.Type == "long")
	 	primitive.Type = "Int64";
	if(primitive.Type == "int")
	 	primitive.Type = "Int32";
	
	 return primitive.Type;
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
